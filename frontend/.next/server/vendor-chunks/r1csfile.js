"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/r1csfile";
exports.ids = ["vendor-chunks/r1csfile"];
exports.modules = {

/***/ "(rsc)/../backend/node_modules/r1csfile/src/r1csfile.js":
/*!********************************************************!*\
  !*** ../backend/node_modules/r1csfile/src/r1csfile.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R1CS_FILE_CONSTRAINTS_SECTION: () => (/* binding */ R1CS_FILE_CONSTRAINTS_SECTION),\n/* harmony export */   R1CS_FILE_CUSTOM_GATES_LIST_SECTION: () => (/* binding */ R1CS_FILE_CUSTOM_GATES_LIST_SECTION),\n/* harmony export */   R1CS_FILE_CUSTOM_GATES_USES_SECTION: () => (/* binding */ R1CS_FILE_CUSTOM_GATES_USES_SECTION),\n/* harmony export */   R1CS_FILE_HEADER_SECTION: () => (/* binding */ R1CS_FILE_HEADER_SECTION),\n/* harmony export */   R1CS_FILE_WIRE2LABELID_SECTION: () => (/* binding */ R1CS_FILE_WIRE2LABELID_SECTION),\n/* harmony export */   readConstraints: () => (/* binding */ readConstraints),\n/* harmony export */   readCustomGatesListSection: () => (/* binding */ readCustomGatesListSection),\n/* harmony export */   readCustomGatesUsesSection: () => (/* binding */ readCustomGatesUsesSection),\n/* harmony export */   readMap: () => (/* binding */ readMap),\n/* harmony export */   readR1cs: () => (/* binding */ readR1cs),\n/* harmony export */   readR1csFd: () => (/* binding */ readR1csFd),\n/* harmony export */   readR1csHeader: () => (/* binding */ readR1csHeader),\n/* harmony export */   writeR1cs: () => (/* binding */ writeR1cs),\n/* harmony export */   writeR1csConstraints: () => (/* binding */ writeR1csConstraints),\n/* harmony export */   writeR1csHeader: () => (/* binding */ writeR1csHeader),\n/* harmony export */   writeR1csMap: () => (/* binding */ writeR1csMap)\n/* harmony export */ });\n/* harmony import */ var ffjavascript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ffjavascript */ \"(rsc)/../backend/node_modules/ffjavascript/main.js\");\n/* harmony import */ var _iden3_bigarray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @iden3/bigarray */ \"(rsc)/../backend/node_modules/@iden3/bigarray/src/bigarray.js\");\n/* harmony import */ var _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @iden3/binfileutils */ \"(rsc)/../backend/node_modules/@iden3/binfileutils/src/binfileutils.js\");\n\n\n\n\nconst R1CS_FILE_HEADER_SECTION = 1;\nconst R1CS_FILE_CONSTRAINTS_SECTION = 2;\nconst R1CS_FILE_WIRE2LABELID_SECTION = 3;\nconst R1CS_FILE_CUSTOM_GATES_LIST_SECTION = 4;\nconst R1CS_FILE_CUSTOM_GATES_USES_SECTION = 5;\n\nasync function readR1csHeader(fd,sections,singleThread) {\n    let options;\n    if (typeof singleThread === \"object\") {\n        options = singleThread;\n    } else if (typeof singleThread === \"undefined\") {\n        options= {\n            singleThread: false,\n        };\n    } else {\n        options = {\n            singleThread: singleThread,\n        };\n    }\n\n    const res = {};\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.startReadUniqueSection(fd, sections, 1);\n    // Read Header\n    res.n8 = await fd.readULE32();\n    res.prime = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.readBigInt(fd, res.n8);\n\n    if (options.F) {\n        if (options.F.p != res.prime) throw new Error(\"Different Prime\");\n        res.F = options.F;\n    } else if (options.getFieldFromPrime) {\n        res.F = await options.getFieldFromPrime(res.prime, options.singleThread);\n    } else if (options.getCurveFromPrime) {\n        res.curve = await options.getCurveFromPrime(res.prime, options.singleThread);\n        res.F = res.curve.Fr;\n    } else {\n        try {\n            res.curve = await (0,ffjavascript__WEBPACK_IMPORTED_MODULE_0__.getCurveFromR)(res.prime, options.singleThread);\n            res.F = res.curve.Fr;\n        } catch (err) {\n            res.F = new ffjavascript__WEBPACK_IMPORTED_MODULE_0__.F1Field(res.prime);\n        }\n    }\n\n    res.nVars = await fd.readULE32();\n    res.nOutputs = await fd.readULE32();\n    res.nPubInputs = await fd.readULE32();\n    res.nPrvInputs = await fd.readULE32();\n    res.nLabels = await fd.readULE64();\n    res.nConstraints = await fd.readULE32();\n    res.useCustomGates = typeof sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== null\n        && typeof sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== null;\n\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.endReadSection(fd);\n\n    return res;\n}\n\nasync function readConstraints(fd,sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n\n    const bR1cs = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.readSection(fd, sections, 2);\n    let bR1csPos = 0;\n    let constraints;\n    if (r1cs.nConstraints>1<<20) {\n        constraints = new _iden3_bigarray__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    } else {\n        constraints = [];\n    }\n    for (let i=0; i<r1cs.nConstraints; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading constraints: ${i}/${r1cs.nConstraints}`);\n        const c = readConstraint();\n        constraints.push(c);\n    }\n    return constraints;\n\n\n    function readConstraint() {\n        const c = [];\n        c[0] = readLC();\n        c[1] = readLC();\n        c[2] = readLC();\n        return c;\n    }\n\n    function readLC() {\n        const lc= {};\n\n        const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos+4);\n        bR1csPos += 4;\n        const buffUL32V = new DataView(buffUL32.buffer);\n        const nIdx = buffUL32V.getUint32(0, true);\n\n        const buff = bR1cs.slice(bR1csPos, bR1csPos + (4+r1cs.n8)*nIdx );\n        bR1csPos += (4+r1cs.n8)*nIdx;\n        const buffV = new DataView(buff.buffer);\n        for (let i=0; i<nIdx; i++) {\n            const idx = buffV.getUint32(i*(4+r1cs.n8), true);\n            const val = r1cs.F.fromRprLE(buff, i*(4+r1cs.n8)+4);\n            lc[idx] = val;\n        }\n        return lc;\n    }\n}\n\nasync function readMap(fd, sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n    const bMap = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.readSection(fd, sections, 3);\n    let bMapPos = 0;\n    let map;\n\n    if (r1cs.nVars>1<<20) {\n        map = new _iden3_bigarray__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    } else {\n        map = [];\n    }\n    for (let i=0; i<r1cs.nVars; i++) {\n        if ((options.logger)&&(i%10000 == 0)) options.logger.info(`${options.loggerCtx}: Loading map: ${i}/${r1cs.nVars}`);\n        const idx = readULE64();\n        map.push(idx);\n    }\n\n    return map;\n\n    function readULE64() {\n        const buffULE64 = bMap.slice(bMapPos, bMapPos+8);\n        bMapPos += 8;\n        const buffULE64V = new DataView(buffULE64.buffer);\n        const LSB = buffULE64V.getUint32(0, true);\n        const MSB = buffULE64V.getUint32(4, true);\n\n        return MSB * 0x100000000 + LSB;\n    }\n\n}\n\nasync function readR1csFd(fd, sections, options) {\n    /**\n     * Options properties:\n     *  loadConstraints: <bool> true by default\n     *  loadMap:         <bool> false by default\n     *  loadCustomGates: <bool> true by default\n     */\n\n    if(typeof options !== \"object\") {\n        throw new Error(\"readR1csFd: options must be an object\");\n    }\n\n    options.loadConstraints = \"loadConstraints\" in options ? options.loadConstraints : true;\n    options.loadMap = \"loadMap\" in options ? options.loadMap : false;\n    options.loadCustomGates = \"loadCustomGates\" in options ? options.loadCustomGates : true;\n\n    const res = await readR1csHeader(fd, sections, options);\n\n    if (options.loadConstraints) {\n        res.constraints = await readConstraints(fd, sections, res, options);\n    }\n\n    // Read Labels\n\n    if (options.loadMap) {\n        res.map = await readMap(fd, sections, res, options);\n    }\n\n    if (options.loadCustomGates) {\n        if (res.useCustomGates) {\n            res.customGates = await readCustomGatesListSection(fd, sections, res);\n            res.customGatesUses = await readCustomGatesUsesSection(fd, sections, options);\n        } else {\n            res.customGates = [];\n            res.customGatesUses = [];\n        }\n    }\n    return res;\n}\n\nasync function readR1cs(fileName, loadConstraints, loadMap, singleThread, logger, loggerCtx) {\n    let options;\n    if (typeof loadConstraints === \"object\") {\n        options = loadConstraints;\n    } else if (typeof loadConstraints === \"undefined\") {\n        options= {\n            loadConstraints: true,\n            loadMap: false,\n            loadCustomGates: true\n        };\n    } else {\n        options = {\n            loadConstraints: loadConstraints,\n            loadMap: loadMap,\n            singleThread: singleThread,\n            logger: logger,\n            loggerCtx: loggerCtx\n        };\n    }\n\n    const {fd, sections} = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.readBinFile(fileName, \"r1cs\", 1, 1<<25, 1<<22);\n\n    const res = await readR1csFd(fd, sections, options);\n\n    await fd.close();\n\n    return res;\n}\n\nasync function readCustomGatesListSection(fd, sections, res) {\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.startReadUniqueSection(fd, sections, R1CS_FILE_CUSTOM_GATES_LIST_SECTION);\n\n    let num = await fd.readULE32();\n\n    let customGates = [];\n    for (let i = 0; i < num; i++) {\n        let customGate = {};\n        customGate.templateName = await fd.readString();\n        let numParameters = await fd.readULE32();\n\n        customGate.parameters = Array(numParameters);\n        let buff = await fd.read(res.n8 * numParameters);\n\n        for (let j = 0; j < numParameters; j++) {\n            customGate.parameters[j] = res.F.fromRprLE(buff, j * res.n8, res.n8);;\n        }\n        customGates.push(customGate);\n    }\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.endReadSection(fd);\n\n    return customGates;\n}\n\nasync function readCustomGatesUsesSection(fd,sections, options) {\n    const bR1cs = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.readSection(fd, sections, R1CS_FILE_CUSTOM_GATES_USES_SECTION);\n    const bR1cs32 = new Uint32Array(bR1cs.buffer, bR1cs.byteOffset, bR1cs.byteLength/4);\n    const nCustomGateUses = bR1cs32[0];\n    let bR1csPos = 1;\n    let customGatesUses;\n    if (nCustomGateUses>1<<20) {\n        customGatesUses = new _iden3_bigarray__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    } else {\n        customGatesUses = [];\n    }\n    for (let i=0; i<nCustomGateUses; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading custom gate uses: ${i}/${nCustomGateUses}`);\n        let c = {};\n        c.id = bR1cs32[bR1csPos++];\n        let numSignals = bR1cs32[bR1csPos++];\n        c.signals = [];\n        for (let j = 0; j < numSignals; j++) {\n            const LSB = bR1cs32[bR1csPos++];\n            const MSB = bR1cs32[bR1csPos++];\n            c.signals.push(MSB * 0x100000000 + LSB);\n        }\n        customGatesUses.push(c);\n    }\n    return customGatesUses;\n}\n\nasync function writeR1csHeader(fd, cir) {\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.startWriteSection(fd, 1);\n    await fd.writeULE32(cir.n8); // Temporally set to 0 length\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.writeBigInt(fd, cir.prime, cir.n8);\n\n    await fd.writeULE32(cir.nVars);\n    await fd.writeULE32(cir.nOutputs);\n    await fd.writeULE32(cir.nPubInputs);\n    await fd.writeULE32(cir.nPrvInputs);\n    await fd.writeULE64(cir.nLabels);\n    await fd.writeULE32(cir.constraints.length);\n\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.endWriteSection(fd);\n}\n\nasync function writeR1csConstraints(fd, cir, logger, loggerCtx) {\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.startWriteSection(fd, 2);\n\n    for (let i=0; i<cir.constraints.length; i++) {\n        if ((logger)&&(i%10000 == 0)) logger.info(`${loggerCtx}: writing constraint: ${i}/${cir.constraints.length}`);\n        await writeConstraint(cir.constraints[i]);\n    }\n\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.endWriteSection(fd);\n\n\n    function writeConstraint(c) {\n        const n8 = cir.n8;\n        const F = cir.F || cir.curve.Fr;\n        const idxA = Object.keys(c[0]);\n        const idxB = Object.keys(c[1]);\n        const idxC = Object.keys(c[2]);\n        const buff = new Uint8Array((idxA.length+idxB.length+idxC.length)*(n8+4) + 12);\n        const buffV = new DataView(buff.buffer);\n        let o=0;\n\n        buffV.setUint32(o, idxA.length, true); o+=4;\n        for (let i=0; i<idxA.length; i++) {\n            const coef = idxA[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[0][coef]); o+=n8;\n        }\n\n        buffV.setUint32(o, idxB.length, true); o+=4;\n        for (let i=0; i<idxB.length; i++) {\n            const coef = idxB[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[1][coef]); o+=n8;\n        }\n\n        buffV.setUint32(o, idxC.length, true); o+=4;\n        for (let i=0; i<idxC.length; i++) {\n            const coef = idxC[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[2][coef]); o+=n8;\n        }\n\n        return fd.write(buff);\n    }\n\n}\n\n\nasync function writeR1csMap(fd, cir, logger, loggerCtx) {\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.startWriteSection(fd, 3);\n\n    if (cir.map.length != cir.nVars) throw new Error(\"Invalid map size\");\n    for (let i=0; i<cir.nVars; i++) {\n        if ((logger)&&(i%10000 == 0)) logger.info(`${loggerCtx}: writing map: ${i}/${cir.nVars}`);\n        await fd.writeULE64(cir.map[i]);\n    }\n\n    await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.endWriteSection(fd);\n}\n\n\n\nasync function writeR1cs(fileName, cir, logger, loggerCtx) {\n\n    const fd = await _iden3_binfileutils__WEBPACK_IMPORTED_MODULE_2__.createBinFile(fileName, \"r1cs\", 1, 3, 1<<25, 1<<22);\n\n    await writeR1csHeader(fd, cir);\n\n    await writeR1csConstraints(fd, cir, logger, loggerCtx);\n\n    await writeR1csMap(fd, cir, logger, loggerCtx);\n\n    await fd.close();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../backend/node_modules/r1csfile/src/r1csfile.js\n");

/***/ })

};
;